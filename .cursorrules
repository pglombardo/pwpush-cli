# Cursor AI Rules for Password Pusher CLI

## Project Overview
This is a Python CLI tool for Password Pusher - a secure password sharing service. The CLI allows users to push passwords, secrets, and files with expiration controls to Password Pusher instances.

## Key Technologies & Dependencies
- **Python 3.9.2+** (minimum requirement)
- **Typer** - CLI framework with rich output
- **Rich** - Beautiful terminal output with tables and formatting
- **Requests** - HTTP client for API communication
- **Poetry** - Dependency management and packaging
- **Pytest** - Testing framework
- **Black** - Code formatting
- **MyPy** - Type checking
- **Bandit** - Security linting

## Project Structure
```
pwpush/
‚îú‚îÄ‚îÄ __init__.py          # Package initialization and version
‚îú‚îÄ‚îÄ __main__.py          # Main CLI application entry point
‚îú‚îÄ‚îÄ commands/
‚îÇ   ‚îî‚îÄ‚îÄ config.py        # Configuration management commands
‚îú‚îÄ‚îÄ options.py           # Configuration and CLI options handling
‚îî‚îÄ‚îÄ utils.py             # Utility functions
```

## Coding Standards

### Code Style
- **Black** formatting with 88 character line length
- **isort** for import organization
- **Type hints** required for all functions
- **Docstrings** following Google style
- **MyPy** strict type checking enabled

### Security
- **Bandit** security linting required
- **Safety** dependency vulnerability scanning
- Never log or expose sensitive data (passwords, tokens, secrets)
- Use `hide_input=True` for password prompts
- Validate all user inputs

### CLI Design Patterns
- Use **Typer** for all CLI commands
- Rich console output with tables and colors
- Support both human-readable and JSON output modes
- Implement proper error handling with meaningful messages
- Use `typer.Exit()` for clean command termination

### Configuration Management
- Store user config in `~/.config/pwpush/config.ini`
- Use `configparser.ConfigParser` for configuration
- Provide sensible defaults
- Support both CLI flags and config file settings
- CLI flags override config file settings

### API Communication
- Use **requests** library for HTTP communication
- Implement proper timeout handling (30s for requests, 5s for auth)
- Support authentication via headers (`X-User-Email`, `X-User-Token`)
- Handle network errors gracefully with user-friendly messages
- Support both password pushes (`/p.json`) and file pushes (`/f.json`)

## Development Workflow

### Testing
- Write tests for all new functionality
- Use `pytest` with `CliRunner` for CLI testing
- Mock external API calls in tests
- Test both success and error scenarios
- Maintain high test coverage

### Code Quality
- Run `make lint` before committing (includes tests, formatting, type checking, security)
- Use `make codestyle` for automatic formatting
- All code must pass MyPy type checking
- Security scan with Bandit required

### Version Management
- Follow semantic versioning
- Update version in `pyproject.toml`
- Update `__init__.py` version function
- Tag releases appropriately

## Key Features to Maintain

### Core Functionality
- **Password/Secret Pushing**: Support interactive and direct secret input
- **File Upload**: Support file sharing with same expiration controls
- **Auto-generation**: Generate secure passwords and passphrases
- **Expiration Controls**: Days, views, or both
- **Authentication**: Login/logout with API tokens
- **Audit Logs**: Track access and usage
- **Configuration**: Persistent settings management

### User Experience
- **Rich Output**: Beautiful tables and formatted output
- **JSON Support**: Machine-readable output for scripting
- **Verbose/Debug Modes**: Detailed information when needed
- **Error Handling**: Clear, actionable error messages
- **Help System**: Comprehensive help and examples

### Security Features
- **Retrieval Step**: Optional click-through to prevent URL scanners
- **Deletable Content**: Allow viewers to delete after retrieval
- **Passphrase Protection**: Optional additional encryption
- **Reference Notes**: Encrypted notes visible only to creator

## API Integration
- Support multiple Password Pusher instances (eu.pwpush.com, us.pwpush.com, self-hosted)
- Handle authentication via email/token pairs
- Support both password and file push endpoints
- Implement proper error handling for API responses
- Support audit and management endpoints for authenticated users

## Error Handling Patterns
```python
# Network errors
except requests.exceptions.Timeout:
    rprint("[red]Error: Request timed out. Please check your connection and try again.[/red]")
    raise typer.Exit(1)

# File errors
except FileNotFoundError:
    rprint(f"[red]Error: File '{payload}' not found.[/red]")
    raise typer.Exit(1)

# Authentication errors
if user_config["instance"]["email"] == "Not Set":
    rprint("You must log into an instance first.")
    raise typer.Exit(1)
```

## Output Patterns
```python
# Rich console output
console.print("[bold blue]üîê Password Pusher CLI[/bold blue]")
console.print(f"[dim]Version {version}[/dim]")

# Table output
table = Table("Key", "Value", "Description")
table.add_row("URL", user_config["instance"]["url"], "The Password Pusher instance")

# JSON output
if json_output():
    print(json.dumps(response_data))
else:
    # Human-readable output
    rprint(f"The secret has been pushed to:\n{body['url']}")
```

## Configuration Keys
- **Instance**: `url`, `email`, `token`
- **Expiration**: `expire_after_days`, `expire_after_views`, `retrieval_step`, `deletable_by_viewer`
- **CLI**: `json`, `verbose`, `pretty`, `debug`

## Best Practices
1. **Always validate user input** before processing
2. **Use type hints** for all function parameters and return values
3. **Handle network errors gracefully** with user-friendly messages
4. **Support both interactive and non-interactive modes**
5. **Provide comprehensive help and examples**
6. **Test with multiple Password Pusher instances**
7. **Maintain backward compatibility** when possible
8. **Use Rich for all terminal output** (tables, colors, formatting)
9. **Implement proper logging** for debug mode
10. **Follow security best practices** for handling sensitive data

## Common Commands to Support
- `pwpush push` - Push passwords/secrets
- `pwpush push-file` - Upload files
- `pwpush login/logout` - Authentication
- `pwpush list` - List active pushes
- `pwpush audit` - View audit logs
- `pwpush expire` - Expire pushes
- `pwpush config` - Configuration management

## GitHub Label System

### Core Labels
- **bug** - Something isn't working
- **enhancement** - New feature or request
- **documentation** - Improvements or additions to documentation
- **good first issue** - Good for newcomers
- **help wanted** - Extra attention is needed
- **duplicate** - This issue or pull request already exists
- **invalid** - This doesn't seem right
- **question** - Further information is requested
- **wontfix** - This will not be worked on

### Feature Categories
- **cli** - Command line interface improvements and features
- **config** - Configuration management and settings
- **api** - API integration and communication
- **security** - Security-related features and improvements
- **pro-features** - Password Pusher Pro specific features

### Component Areas
- **authentication** - Login, logout, and authentication features
- **file-upload** - File upload and management features
- **notifications** - Email notifications and alerts

### Technical Areas
- **testing** - Tests, test improvements, and test infrastructure
- **build** - Build system, CI/CD, and deployment
- **packaging** - PyPI packaging, distribution, and installation
- **performance** - Performance improvements and optimizations
- **dependencies** - Pull requests that update a dependency file

### Quality & UX
- **ux** - User experience and interface improvements

### Priority Levels
- **priority: high** - High priority issues that need immediate attention
- **priority: medium** - Medium priority issues for normal development cycle
- **priority: low** - Low priority issues that can be addressed when time permits

### Label Usage Guidelines
- Use multiple labels to categorize issues comprehensively
- Always include priority labels for better project management
- Use `pro-features` for enterprise-specific enhancements
- Combine `api` with other labels for API-related work
- Use `security` for any security-related issues or improvements

## Documentation Standards
- Update README.md for new features
- Include examples in docstrings
- Document all configuration options
- Provide troubleshooting guidance
- Maintain API documentation links
